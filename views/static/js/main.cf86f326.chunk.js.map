{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","send","socketIOClient","state","endpoint","emit","color","setColor","setState","componentDidMount","socket","setInterval","on","col","document","body","style","backgroundColor","_this2","react_default","a","createElement","textAlign","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAuDeA,cAlDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYFI,KAAO,WACUC,IAAeR,EAAKS,MAAMC,UAClCC,KAAK,eAAgBX,EAAKS,MAAMG,QAf3BZ,EAoBda,SAAW,SAACD,GACVZ,EAAKc,SAAS,CAAEF,WArBJZ,EAwBde,kBAAoB,WAChB,IAAMC,EAASR,IAAeR,EAAKS,MAAMC,UACzCO,YAAYjB,EAAKO,OAAQ,KACzBS,EAAOE,GAAG,eAAgB,SAACC,GACvBC,SAASC,KAAKC,MAAMC,gBAAkBJ,KA1B5CnB,EAAKS,MAAQ,CACXC,SAAU,yFAGVE,MAAO,SANGZ,wEAgCL,IAAAwB,EAAArB,KAGQK,IAAeL,KAAKM,MAAMC,UAEzC,OACEe,EAAAC,EAAAC,cAAA,OAAKL,MAAO,CAAEM,UAAW,WACvBH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAML,EAAKjB,SAA5B,gBAIAkB,EAAAC,EAAAC,cAAA,UAAQG,GAAG,OAAOD,QAAS,kBAAML,EAAKX,SAAS,UAA/C,QACAY,EAAAC,EAAAC,cAAA,UAAQG,GAAG,MAAMD,QAAS,kBAAML,EAAKX,SAAS,SAA9C,eA7CUkB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASnB,SAASoB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf86f326.chunk.js","sourcesContent":["// Updated. Thanks to: Paul Luna\nimport React, { Component } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      endpoint: \"http://my-project-chung-my-project-chung.1d35.starter-us-east-1.openshiftapps.com:8000\",\n\n      ///\n      color: 'white'\n      ///\n\n    };\n  }\n\n  // sending sockets\n  send = () => {\n    const socket = socketIOClient(this.state.endpoint);\n    socket.emit('change color', this.state.color) // change 'red' to this.state.color\n  }\n  ///\n\n  // adding the function\n  setColor = (color) => {\n    this.setState({ color })\n  }\n\n  componentDidMount = () => {\n      const socket = socketIOClient(this.state.endpoint);\n      setInterval(this.send(), 1000)\n      socket.on('change color', (col) => {\n          document.body.style.backgroundColor = col\n      })\n  }\n\n  render() {\n    // testing for socket connections\n\n    const socket = socketIOClient(this.state.endpoint);\n\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <button onClick={() => this.send() }>Change Color</button>\n\n\n\n        <button id=\"blue\" onClick={() => this.setColor('blue')}>Blue</button>\n        <button id=\"red\" onClick={() => this.setColor('red')}>Red</button>\n\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}